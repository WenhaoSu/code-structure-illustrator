import { ATN } from 'antlr4ts/atn/ATN';
import { Parser } from 'antlr4ts/Parser';
import { ParserRuleContext } from 'antlr4ts/ParserRuleContext';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Token } from 'antlr4ts/Token';
import { TokenStream } from 'antlr4ts/TokenStream';
import { TerminalNode } from 'antlr4ts/tree/TerminalNode';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { JavaParserListener } from './JavaParserListener';
import { JavaParserVisitor } from './JavaParserVisitor';
export declare class JavaParser extends Parser {
    static readonly ABSTRACT: number;
    static readonly ASSERT: number;
    static readonly BOOLEAN: number;
    static readonly BREAK: number;
    static readonly BYTE: number;
    static readonly CASE: number;
    static readonly CATCH: number;
    static readonly CHAR: number;
    static readonly CLASS: number;
    static readonly CONST: number;
    static readonly CONTINUE: number;
    static readonly DEFAULT: number;
    static readonly DO: number;
    static readonly DOUBLE: number;
    static readonly ELSE: number;
    static readonly ENUM: number;
    static readonly EXTENDS: number;
    static readonly FINAL: number;
    static readonly FINALLY: number;
    static readonly FLOAT: number;
    static readonly FOR: number;
    static readonly IF: number;
    static readonly GOTO: number;
    static readonly IMPLEMENTS: number;
    static readonly IMPORT: number;
    static readonly INSTANCEOF: number;
    static readonly INT: number;
    static readonly INTERFACE: number;
    static readonly LONG: number;
    static readonly NATIVE: number;
    static readonly NEW: number;
    static readonly PACKAGE: number;
    static readonly PRIVATE: number;
    static readonly PROTECTED: number;
    static readonly PUBLIC: number;
    static readonly RETURN: number;
    static readonly SHORT: number;
    static readonly STATIC: number;
    static readonly STRICTFP: number;
    static readonly SUPER: number;
    static readonly SWITCH: number;
    static readonly SYNCHRONIZED: number;
    static readonly THIS: number;
    static readonly THROW: number;
    static readonly THROWS: number;
    static readonly TRANSIENT: number;
    static readonly TRY: number;
    static readonly VOID: number;
    static readonly VOLATILE: number;
    static readonly WHILE: number;
    static readonly DECIMAL_LITERAL: number;
    static readonly HEX_LITERAL: number;
    static readonly OCT_LITERAL: number;
    static readonly BINARY_LITERAL: number;
    static readonly FLOAT_LITERAL: number;
    static readonly HEX_FLOAT_LITERAL: number;
    static readonly BOOL_LITERAL: number;
    static readonly CHAR_LITERAL: number;
    static readonly STRING_LITERAL: number;
    static readonly NULL_LITERAL: number;
    static readonly LPAREN: number;
    static readonly RPAREN: number;
    static readonly LBRACE: number;
    static readonly RBRACE: number;
    static readonly LBRACK: number;
    static readonly RBRACK: number;
    static readonly SEMI: number;
    static readonly COMMA: number;
    static readonly DOT: number;
    static readonly ASSIGN: number;
    static readonly GT: number;
    static readonly LT: number;
    static readonly BANG: number;
    static readonly TILDE: number;
    static readonly QUESTION: number;
    static readonly COLON: number;
    static readonly EQUAL: number;
    static readonly LE: number;
    static readonly GE: number;
    static readonly NOTEQUAL: number;
    static readonly AND: number;
    static readonly OR: number;
    static readonly INC: number;
    static readonly DEC: number;
    static readonly ADD: number;
    static readonly SUB: number;
    static readonly MUL: number;
    static readonly DIV: number;
    static readonly BITAND: number;
    static readonly BITOR: number;
    static readonly CARET: number;
    static readonly MOD: number;
    static readonly ADD_ASSIGN: number;
    static readonly SUB_ASSIGN: number;
    static readonly MUL_ASSIGN: number;
    static readonly DIV_ASSIGN: number;
    static readonly AND_ASSIGN: number;
    static readonly OR_ASSIGN: number;
    static readonly XOR_ASSIGN: number;
    static readonly MOD_ASSIGN: number;
    static readonly LSHIFT_ASSIGN: number;
    static readonly RSHIFT_ASSIGN: number;
    static readonly URSHIFT_ASSIGN: number;
    static readonly ARROW: number;
    static readonly COLONCOLON: number;
    static readonly AT: number;
    static readonly ELLIPSIS: number;
    static readonly WS: number;
    static readonly COMMENT: number;
    static readonly LINE_COMMENT: number;
    static readonly IDENTIFIER: number;
    static readonly RULE_compilationUnit: number;
    static readonly RULE_packageDeclaration: number;
    static readonly RULE_importDeclaration: number;
    static readonly RULE_typeDeclaration: number;
    static readonly RULE_modifier: number;
    static readonly RULE_classOrInterfaceModifier: number;
    static readonly RULE_variableModifier: number;
    static readonly RULE_classDeclaration: number;
    static readonly RULE_typeParameters: number;
    static readonly RULE_typeParameter: number;
    static readonly RULE_typeBound: number;
    static readonly RULE_enumDeclaration: number;
    static readonly RULE_enumConstants: number;
    static readonly RULE_enumConstant: number;
    static readonly RULE_enumBodyDeclarations: number;
    static readonly RULE_interfaceDeclaration: number;
    static readonly RULE_classBody: number;
    static readonly RULE_interfaceBody: number;
    static readonly RULE_classBodyDeclaration: number;
    static readonly RULE_memberDeclaration: number;
    static readonly RULE_methodDeclaration: number;
    static readonly RULE_methodBody: number;
    static readonly RULE_typeTypeOrVoid: number;
    static readonly RULE_genericMethodDeclaration: number;
    static readonly RULE_genericConstructorDeclaration: number;
    static readonly RULE_constructorDeclaration: number;
    static readonly RULE_fieldDeclaration: number;
    static readonly RULE_interfaceBodyDeclaration: number;
    static readonly RULE_interfaceMemberDeclaration: number;
    static readonly RULE_constDeclaration: number;
    static readonly RULE_constantDeclarator: number;
    static readonly RULE_interfaceMethodDeclaration: number;
    static readonly RULE_interfaceMethodModifier: number;
    static readonly RULE_genericInterfaceMethodDeclaration: number;
    static readonly RULE_variableDeclarators: number;
    static readonly RULE_variableDeclarator: number;
    static readonly RULE_variableDeclaratorId: number;
    static readonly RULE_variableInitializer: number;
    static readonly RULE_arrayInitializer: number;
    static readonly RULE_classOrInterfaceType: number;
    static readonly RULE_typeArgument: number;
    static readonly RULE_qualifiedNameList: number;
    static readonly RULE_formalParameters: number;
    static readonly RULE_formalParameterList: number;
    static readonly RULE_formalParameter: number;
    static readonly RULE_lastFormalParameter: number;
    static readonly RULE_qualifiedName: number;
    static readonly RULE_literal: number;
    static readonly RULE_integerLiteral: number;
    static readonly RULE_floatLiteral: number;
    static readonly RULE_annotation: number;
    static readonly RULE_elementValuePairs: number;
    static readonly RULE_elementValuePair: number;
    static readonly RULE_elementValue: number;
    static readonly RULE_elementValueArrayInitializer: number;
    static readonly RULE_annotationTypeDeclaration: number;
    static readonly RULE_annotationTypeBody: number;
    static readonly RULE_annotationTypeElementDeclaration: number;
    static readonly RULE_annotationTypeElementRest: number;
    static readonly RULE_annotationMethodOrConstantRest: number;
    static readonly RULE_annotationMethodRest: number;
    static readonly RULE_annotationConstantRest: number;
    static readonly RULE_defaultValue: number;
    static readonly RULE_block: number;
    static readonly RULE_blockStatement: number;
    static readonly RULE_localVariableDeclaration: number;
    static readonly RULE_localTypeDeclaration: number;
    static readonly RULE_statement: number;
    static readonly RULE_catchClause: number;
    static readonly RULE_catchType: number;
    static readonly RULE_finallyBlock: number;
    static readonly RULE_resourceSpecification: number;
    static readonly RULE_resources: number;
    static readonly RULE_resource: number;
    static readonly RULE_switchBlockStatementGroup: number;
    static readonly RULE_switchLabel: number;
    static readonly RULE_forControl: number;
    static readonly RULE_forInit: number;
    static readonly RULE_enhancedForControl: number;
    static readonly RULE_parExpression: number;
    static readonly RULE_expressionList: number;
    static readonly RULE_methodCall: number;
    static readonly RULE_expression: number;
    static readonly RULE_lambdaExpression: number;
    static readonly RULE_lambdaParameters: number;
    static readonly RULE_lambdaBody: number;
    static readonly RULE_primary: number;
    static readonly RULE_classType: number;
    static readonly RULE_creator: number;
    static readonly RULE_createdName: number;
    static readonly RULE_innerCreator: number;
    static readonly RULE_arrayCreatorRest: number;
    static readonly RULE_classCreatorRest: number;
    static readonly RULE_explicitGenericInvocation: number;
    static readonly RULE_typeArgumentsOrDiamond: number;
    static readonly RULE_nonWildcardTypeArgumentsOrDiamond: number;
    static readonly RULE_nonWildcardTypeArguments: number;
    static readonly RULE_typeList: number;
    static readonly RULE_typeType: number;
    static readonly RULE_primitiveType: number;
    static readonly RULE_typeArguments: number;
    static readonly RULE_superSuffix: number;
    static readonly RULE_explicitGenericInvocationSuffix: number;
    static readonly RULE_arguments: number;
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    readonly vocabulary: Vocabulary;
    readonly grammarFileName: string;
    readonly ruleNames: string[];
    readonly serializedATN: string;
    constructor(input: TokenStream);
    compilationUnit(): CompilationUnitContext;
    packageDeclaration(): PackageDeclarationContext;
    importDeclaration(): ImportDeclarationContext;
    typeDeclaration(): TypeDeclarationContext;
    modifier(): ModifierContext;
    classOrInterfaceModifier(): ClassOrInterfaceModifierContext;
    variableModifier(): VariableModifierContext;
    classDeclaration(): ClassDeclarationContext;
    typeParameters(): TypeParametersContext;
    typeParameter(): TypeParameterContext;
    typeBound(): TypeBoundContext;
    enumDeclaration(): EnumDeclarationContext;
    enumConstants(): EnumConstantsContext;
    enumConstant(): EnumConstantContext;
    enumBodyDeclarations(): EnumBodyDeclarationsContext;
    interfaceDeclaration(): InterfaceDeclarationContext;
    classBody(): ClassBodyContext;
    interfaceBody(): InterfaceBodyContext;
    classBodyDeclaration(): ClassBodyDeclarationContext;
    memberDeclaration(): MemberDeclarationContext;
    methodDeclaration(): MethodDeclarationContext;
    methodBody(): MethodBodyContext;
    typeTypeOrVoid(): TypeTypeOrVoidContext;
    genericMethodDeclaration(): GenericMethodDeclarationContext;
    genericConstructorDeclaration(): GenericConstructorDeclarationContext;
    constructorDeclaration(): ConstructorDeclarationContext;
    fieldDeclaration(): FieldDeclarationContext;
    interfaceBodyDeclaration(): InterfaceBodyDeclarationContext;
    interfaceMemberDeclaration(): InterfaceMemberDeclarationContext;
    constDeclaration(): ConstDeclarationContext;
    constantDeclarator(): ConstantDeclaratorContext;
    interfaceMethodDeclaration(): InterfaceMethodDeclarationContext;
    interfaceMethodModifier(): InterfaceMethodModifierContext;
    genericInterfaceMethodDeclaration(): GenericInterfaceMethodDeclarationContext;
    variableDeclarators(): VariableDeclaratorsContext;
    variableDeclarator(): VariableDeclaratorContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    variableInitializer(): VariableInitializerContext;
    arrayInitializer(): ArrayInitializerContext;
    classOrInterfaceType(): ClassOrInterfaceTypeContext;
    typeArgument(): TypeArgumentContext;
    qualifiedNameList(): QualifiedNameListContext;
    formalParameters(): FormalParametersContext;
    formalParameterList(): FormalParameterListContext;
    formalParameter(): FormalParameterContext;
    lastFormalParameter(): LastFormalParameterContext;
    qualifiedName(): QualifiedNameContext;
    literal(): LiteralContext;
    integerLiteral(): IntegerLiteralContext;
    floatLiteral(): FloatLiteralContext;
    annotation(): AnnotationContext;
    elementValuePairs(): ElementValuePairsContext;
    elementValuePair(): ElementValuePairContext;
    elementValue(): ElementValueContext;
    elementValueArrayInitializer(): ElementValueArrayInitializerContext;
    annotationTypeDeclaration(): AnnotationTypeDeclarationContext;
    annotationTypeBody(): AnnotationTypeBodyContext;
    annotationTypeElementDeclaration(): AnnotationTypeElementDeclarationContext;
    annotationTypeElementRest(): AnnotationTypeElementRestContext;
    annotationMethodOrConstantRest(): AnnotationMethodOrConstantRestContext;
    annotationMethodRest(): AnnotationMethodRestContext;
    annotationConstantRest(): AnnotationConstantRestContext;
    defaultValue(): DefaultValueContext;
    block(): BlockContext;
    blockStatement(): BlockStatementContext;
    localVariableDeclaration(): LocalVariableDeclarationContext;
    localTypeDeclaration(): LocalTypeDeclarationContext;
    statement(): StatementContext;
    catchClause(): CatchClauseContext;
    catchType(): CatchTypeContext;
    finallyBlock(): FinallyBlockContext;
    resourceSpecification(): ResourceSpecificationContext;
    resources(): ResourcesContext;
    resource(): ResourceContext;
    switchBlockStatementGroup(): SwitchBlockStatementGroupContext;
    switchLabel(): SwitchLabelContext;
    forControl(): ForControlContext;
    forInit(): ForInitContext;
    enhancedForControl(): EnhancedForControlContext;
    parExpression(): ParExpressionContext;
    expressionList(): ExpressionListContext;
    methodCall(): MethodCallContext;
    expression(): ExpressionContext;
    expression(_p: number): ExpressionContext;
    lambdaExpression(): LambdaExpressionContext;
    lambdaParameters(): LambdaParametersContext;
    lambdaBody(): LambdaBodyContext;
    primary(): PrimaryContext;
    classType(): ClassTypeContext;
    creator(): CreatorContext;
    createdName(): CreatedNameContext;
    innerCreator(): InnerCreatorContext;
    arrayCreatorRest(): ArrayCreatorRestContext;
    classCreatorRest(): ClassCreatorRestContext;
    explicitGenericInvocation(): ExplicitGenericInvocationContext;
    typeArgumentsOrDiamond(): TypeArgumentsOrDiamondContext;
    nonWildcardTypeArgumentsOrDiamond(): NonWildcardTypeArgumentsOrDiamondContext;
    nonWildcardTypeArguments(): NonWildcardTypeArgumentsContext;
    typeList(): TypeListContext;
    typeType(): TypeTypeContext;
    primitiveType(): PrimitiveTypeContext;
    typeArguments(): TypeArgumentsContext;
    superSuffix(): SuperSuffixContext;
    explicitGenericInvocationSuffix(): ExplicitGenericInvocationSuffixContext;
    arguments(): ArgumentsContext;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private expression_sempred(_localctx, predIndex);
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static readonly _ATN: ATN;
}
export declare class CompilationUnitContext extends ParserRuleContext {
    EOF(): TerminalNode;
    packageDeclaration(): PackageDeclarationContext | undefined;
    importDeclaration(): ImportDeclarationContext[];
    importDeclaration(i: number): ImportDeclarationContext;
    typeDeclaration(): TypeDeclarationContext[];
    typeDeclaration(i: number): TypeDeclarationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class PackageDeclarationContext extends ParserRuleContext {
    PACKAGE(): TerminalNode;
    qualifiedName(): QualifiedNameContext;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ImportDeclarationContext extends ParserRuleContext {
    IMPORT(): TerminalNode;
    qualifiedName(): QualifiedNameContext;
    STATIC(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeDeclarationContext extends ParserRuleContext {
    classDeclaration(): ClassDeclarationContext | undefined;
    enumDeclaration(): EnumDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    annotationTypeDeclaration(): AnnotationTypeDeclarationContext | undefined;
    classOrInterfaceModifier(): ClassOrInterfaceModifierContext[];
    classOrInterfaceModifier(i: number): ClassOrInterfaceModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ModifierContext extends ParserRuleContext {
    classOrInterfaceModifier(): ClassOrInterfaceModifierContext | undefined;
    NATIVE(): TerminalNode | undefined;
    SYNCHRONIZED(): TerminalNode | undefined;
    TRANSIENT(): TerminalNode | undefined;
    VOLATILE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ClassOrInterfaceModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    PUBLIC(): TerminalNode | undefined;
    PROTECTED(): TerminalNode | undefined;
    PRIVATE(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    ABSTRACT(): TerminalNode | undefined;
    FINAL(): TerminalNode | undefined;
    STRICTFP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class VariableModifierContext extends ParserRuleContext {
    FINAL(): TerminalNode | undefined;
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ClassDeclarationContext extends ParserRuleContext {
    CLASS(): TerminalNode;
    IDENTIFIER(): TerminalNode;
    classBody(): ClassBodyContext;
    typeParameters(): TypeParametersContext | undefined;
    EXTENDS(): TerminalNode | undefined;
    typeType(): TypeTypeContext | undefined;
    IMPLEMENTS(): TerminalNode | undefined;
    typeList(): TypeListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeParametersContext extends ParserRuleContext {
    typeParameter(): TypeParameterContext[];
    typeParameter(i: number): TypeParameterContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeParameterContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    EXTENDS(): TerminalNode | undefined;
    typeBound(): TypeBoundContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeBoundContext extends ParserRuleContext {
    typeType(): TypeTypeContext[];
    typeType(i: number): TypeTypeContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class EnumDeclarationContext extends ParserRuleContext {
    ENUM(): TerminalNode;
    IDENTIFIER(): TerminalNode;
    IMPLEMENTS(): TerminalNode | undefined;
    typeList(): TypeListContext | undefined;
    enumConstants(): EnumConstantsContext | undefined;
    enumBodyDeclarations(): EnumBodyDeclarationsContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class EnumConstantsContext extends ParserRuleContext {
    enumConstant(): EnumConstantContext[];
    enumConstant(i: number): EnumConstantContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class EnumConstantContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    arguments(): ArgumentsContext | undefined;
    classBody(): ClassBodyContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class EnumBodyDeclarationsContext extends ParserRuleContext {
    classBodyDeclaration(): ClassBodyDeclarationContext[];
    classBodyDeclaration(i: number): ClassBodyDeclarationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class InterfaceDeclarationContext extends ParserRuleContext {
    INTERFACE(): TerminalNode;
    IDENTIFIER(): TerminalNode;
    interfaceBody(): InterfaceBodyContext;
    typeParameters(): TypeParametersContext | undefined;
    EXTENDS(): TerminalNode | undefined;
    typeList(): TypeListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ClassBodyContext extends ParserRuleContext {
    classBodyDeclaration(): ClassBodyDeclarationContext[];
    classBodyDeclaration(i: number): ClassBodyDeclarationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class InterfaceBodyContext extends ParserRuleContext {
    interfaceBodyDeclaration(): InterfaceBodyDeclarationContext[];
    interfaceBodyDeclaration(i: number): InterfaceBodyDeclarationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ClassBodyDeclarationContext extends ParserRuleContext {
    block(): BlockContext | undefined;
    STATIC(): TerminalNode | undefined;
    memberDeclaration(): MemberDeclarationContext | undefined;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class MemberDeclarationContext extends ParserRuleContext {
    methodDeclaration(): MethodDeclarationContext | undefined;
    genericMethodDeclaration(): GenericMethodDeclarationContext | undefined;
    fieldDeclaration(): FieldDeclarationContext | undefined;
    constructorDeclaration(): ConstructorDeclarationContext | undefined;
    genericConstructorDeclaration(): GenericConstructorDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    annotationTypeDeclaration(): AnnotationTypeDeclarationContext | undefined;
    classDeclaration(): ClassDeclarationContext | undefined;
    enumDeclaration(): EnumDeclarationContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class MethodDeclarationContext extends ParserRuleContext {
    typeTypeOrVoid(): TypeTypeOrVoidContext;
    IDENTIFIER(): TerminalNode;
    formalParameters(): FormalParametersContext;
    methodBody(): MethodBodyContext;
    THROWS(): TerminalNode | undefined;
    qualifiedNameList(): QualifiedNameListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class MethodBodyContext extends ParserRuleContext {
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeTypeOrVoidContext extends ParserRuleContext {
    typeType(): TypeTypeContext | undefined;
    VOID(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class GenericMethodDeclarationContext extends ParserRuleContext {
    typeParameters(): TypeParametersContext;
    methodDeclaration(): MethodDeclarationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class GenericConstructorDeclarationContext extends ParserRuleContext {
    typeParameters(): TypeParametersContext;
    constructorDeclaration(): ConstructorDeclarationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ConstructorDeclarationContext extends ParserRuleContext {
    _constructorBody: BlockContext;
    IDENTIFIER(): TerminalNode;
    formalParameters(): FormalParametersContext;
    block(): BlockContext;
    THROWS(): TerminalNode | undefined;
    qualifiedNameList(): QualifiedNameListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class FieldDeclarationContext extends ParserRuleContext {
    typeType(): TypeTypeContext;
    variableDeclarators(): VariableDeclaratorsContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class InterfaceBodyDeclarationContext extends ParserRuleContext {
    interfaceMemberDeclaration(): InterfaceMemberDeclarationContext | undefined;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class InterfaceMemberDeclarationContext extends ParserRuleContext {
    constDeclaration(): ConstDeclarationContext | undefined;
    interfaceMethodDeclaration(): InterfaceMethodDeclarationContext | undefined;
    genericInterfaceMethodDeclaration(): GenericInterfaceMethodDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    annotationTypeDeclaration(): AnnotationTypeDeclarationContext | undefined;
    classDeclaration(): ClassDeclarationContext | undefined;
    enumDeclaration(): EnumDeclarationContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ConstDeclarationContext extends ParserRuleContext {
    typeType(): TypeTypeContext;
    constantDeclarator(): ConstantDeclaratorContext[];
    constantDeclarator(i: number): ConstantDeclaratorContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ConstantDeclaratorContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    variableInitializer(): VariableInitializerContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class InterfaceMethodDeclarationContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    formalParameters(): FormalParametersContext;
    methodBody(): MethodBodyContext;
    typeTypeOrVoid(): TypeTypeOrVoidContext | undefined;
    typeParameters(): TypeParametersContext | undefined;
    interfaceMethodModifier(): InterfaceMethodModifierContext[];
    interfaceMethodModifier(i: number): InterfaceMethodModifierContext;
    THROWS(): TerminalNode | undefined;
    qualifiedNameList(): QualifiedNameListContext | undefined;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class InterfaceMethodModifierContext extends ParserRuleContext {
    annotation(): AnnotationContext | undefined;
    PUBLIC(): TerminalNode | undefined;
    ABSTRACT(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    STATIC(): TerminalNode | undefined;
    STRICTFP(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class GenericInterfaceMethodDeclarationContext extends ParserRuleContext {
    typeParameters(): TypeParametersContext;
    interfaceMethodDeclaration(): InterfaceMethodDeclarationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class VariableDeclaratorsContext extends ParserRuleContext {
    variableDeclarator(): VariableDeclaratorContext[];
    variableDeclarator(i: number): VariableDeclaratorContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class VariableDeclaratorContext extends ParserRuleContext {
    variableDeclaratorId(): VariableDeclaratorIdContext;
    variableInitializer(): VariableInitializerContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class VariableDeclaratorIdContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class VariableInitializerContext extends ParserRuleContext {
    arrayInitializer(): ArrayInitializerContext | undefined;
    expression(): ExpressionContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ArrayInitializerContext extends ParserRuleContext {
    variableInitializer(): VariableInitializerContext[];
    variableInitializer(i: number): VariableInitializerContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ClassOrInterfaceTypeContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode[];
    IDENTIFIER(i: number): TerminalNode;
    typeArguments(): TypeArgumentsContext[];
    typeArguments(i: number): TypeArgumentsContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeArgumentContext extends ParserRuleContext {
    typeType(): TypeTypeContext | undefined;
    EXTENDS(): TerminalNode | undefined;
    SUPER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class QualifiedNameListContext extends ParserRuleContext {
    qualifiedName(): QualifiedNameContext[];
    qualifiedName(i: number): QualifiedNameContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class FormalParametersContext extends ParserRuleContext {
    formalParameterList(): FormalParameterListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class FormalParameterListContext extends ParserRuleContext {
    formalParameter(): FormalParameterContext[];
    formalParameter(i: number): FormalParameterContext;
    lastFormalParameter(): LastFormalParameterContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class FormalParameterContext extends ParserRuleContext {
    typeType(): TypeTypeContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class LastFormalParameterContext extends ParserRuleContext {
    typeType(): TypeTypeContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class QualifiedNameContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode[];
    IDENTIFIER(i: number): TerminalNode;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class LiteralContext extends ParserRuleContext {
    integerLiteral(): IntegerLiteralContext | undefined;
    floatLiteral(): FloatLiteralContext | undefined;
    CHAR_LITERAL(): TerminalNode | undefined;
    STRING_LITERAL(): TerminalNode | undefined;
    BOOL_LITERAL(): TerminalNode | undefined;
    NULL_LITERAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class IntegerLiteralContext extends ParserRuleContext {
    DECIMAL_LITERAL(): TerminalNode | undefined;
    HEX_LITERAL(): TerminalNode | undefined;
    OCT_LITERAL(): TerminalNode | undefined;
    BINARY_LITERAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class FloatLiteralContext extends ParserRuleContext {
    FLOAT_LITERAL(): TerminalNode | undefined;
    HEX_FLOAT_LITERAL(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class AnnotationContext extends ParserRuleContext {
    qualifiedName(): QualifiedNameContext;
    elementValuePairs(): ElementValuePairsContext | undefined;
    elementValue(): ElementValueContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ElementValuePairsContext extends ParserRuleContext {
    elementValuePair(): ElementValuePairContext[];
    elementValuePair(i: number): ElementValuePairContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ElementValuePairContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    elementValue(): ElementValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ElementValueContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    annotation(): AnnotationContext | undefined;
    elementValueArrayInitializer(): ElementValueArrayInitializerContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ElementValueArrayInitializerContext extends ParserRuleContext {
    elementValue(): ElementValueContext[];
    elementValue(i: number): ElementValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class AnnotationTypeDeclarationContext extends ParserRuleContext {
    INTERFACE(): TerminalNode;
    IDENTIFIER(): TerminalNode;
    annotationTypeBody(): AnnotationTypeBodyContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class AnnotationTypeBodyContext extends ParserRuleContext {
    annotationTypeElementDeclaration(): AnnotationTypeElementDeclarationContext[];
    annotationTypeElementDeclaration(i: number): AnnotationTypeElementDeclarationContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class AnnotationTypeElementDeclarationContext extends ParserRuleContext {
    annotationTypeElementRest(): AnnotationTypeElementRestContext | undefined;
    modifier(): ModifierContext[];
    modifier(i: number): ModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class AnnotationTypeElementRestContext extends ParserRuleContext {
    typeType(): TypeTypeContext | undefined;
    annotationMethodOrConstantRest(): AnnotationMethodOrConstantRestContext | undefined;
    classDeclaration(): ClassDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    enumDeclaration(): EnumDeclarationContext | undefined;
    annotationTypeDeclaration(): AnnotationTypeDeclarationContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class AnnotationMethodOrConstantRestContext extends ParserRuleContext {
    annotationMethodRest(): AnnotationMethodRestContext | undefined;
    annotationConstantRest(): AnnotationConstantRestContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class AnnotationMethodRestContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    defaultValue(): DefaultValueContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class AnnotationConstantRestContext extends ParserRuleContext {
    variableDeclarators(): VariableDeclaratorsContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class DefaultValueContext extends ParserRuleContext {
    DEFAULT(): TerminalNode;
    elementValue(): ElementValueContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class BlockContext extends ParserRuleContext {
    blockStatement(): BlockStatementContext[];
    blockStatement(i: number): BlockStatementContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class BlockStatementContext extends ParserRuleContext {
    localVariableDeclaration(): LocalVariableDeclarationContext | undefined;
    statement(): StatementContext | undefined;
    localTypeDeclaration(): LocalTypeDeclarationContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class LocalVariableDeclarationContext extends ParserRuleContext {
    typeType(): TypeTypeContext;
    variableDeclarators(): VariableDeclaratorsContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class LocalTypeDeclarationContext extends ParserRuleContext {
    classDeclaration(): ClassDeclarationContext | undefined;
    interfaceDeclaration(): InterfaceDeclarationContext | undefined;
    classOrInterfaceModifier(): ClassOrInterfaceModifierContext[];
    classOrInterfaceModifier(i: number): ClassOrInterfaceModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class StatementContext extends ParserRuleContext {
    _blockLabel: BlockContext;
    _statementExpression: ExpressionContext;
    _identifierLabel: Token;
    block(): BlockContext | undefined;
    ASSERT(): TerminalNode | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    IF(): TerminalNode | undefined;
    parExpression(): ParExpressionContext | undefined;
    statement(): StatementContext[];
    statement(i: number): StatementContext;
    ELSE(): TerminalNode | undefined;
    FOR(): TerminalNode | undefined;
    forControl(): ForControlContext | undefined;
    WHILE(): TerminalNode | undefined;
    DO(): TerminalNode | undefined;
    TRY(): TerminalNode | undefined;
    finallyBlock(): FinallyBlockContext | undefined;
    catchClause(): CatchClauseContext[];
    catchClause(i: number): CatchClauseContext;
    resourceSpecification(): ResourceSpecificationContext | undefined;
    SWITCH(): TerminalNode | undefined;
    switchBlockStatementGroup(): SwitchBlockStatementGroupContext[];
    switchBlockStatementGroup(i: number): SwitchBlockStatementGroupContext;
    switchLabel(): SwitchLabelContext[];
    switchLabel(i: number): SwitchLabelContext;
    SYNCHRONIZED(): TerminalNode | undefined;
    RETURN(): TerminalNode | undefined;
    THROW(): TerminalNode | undefined;
    BREAK(): TerminalNode | undefined;
    IDENTIFIER(): TerminalNode | undefined;
    CONTINUE(): TerminalNode | undefined;
    SEMI(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class CatchClauseContext extends ParserRuleContext {
    CATCH(): TerminalNode;
    catchType(): CatchTypeContext;
    IDENTIFIER(): TerminalNode;
    block(): BlockContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class CatchTypeContext extends ParserRuleContext {
    qualifiedName(): QualifiedNameContext[];
    qualifiedName(i: number): QualifiedNameContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class FinallyBlockContext extends ParserRuleContext {
    FINALLY(): TerminalNode;
    block(): BlockContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ResourceSpecificationContext extends ParserRuleContext {
    resources(): ResourcesContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ResourcesContext extends ParserRuleContext {
    resource(): ResourceContext[];
    resource(i: number): ResourceContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ResourceContext extends ParserRuleContext {
    classOrInterfaceType(): ClassOrInterfaceTypeContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    expression(): ExpressionContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class SwitchBlockStatementGroupContext extends ParserRuleContext {
    switchLabel(): SwitchLabelContext[];
    switchLabel(i: number): SwitchLabelContext;
    blockStatement(): BlockStatementContext[];
    blockStatement(i: number): BlockStatementContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class SwitchLabelContext extends ParserRuleContext {
    _constantExpression: ExpressionContext;
    _enumConstantName: Token;
    CASE(): TerminalNode | undefined;
    expression(): ExpressionContext | undefined;
    IDENTIFIER(): TerminalNode | undefined;
    DEFAULT(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ForControlContext extends ParserRuleContext {
    _forUpdate: ExpressionListContext;
    enhancedForControl(): EnhancedForControlContext | undefined;
    forInit(): ForInitContext | undefined;
    expression(): ExpressionContext | undefined;
    expressionList(): ExpressionListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ForInitContext extends ParserRuleContext {
    localVariableDeclaration(): LocalVariableDeclarationContext | undefined;
    expressionList(): ExpressionListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class EnhancedForControlContext extends ParserRuleContext {
    typeType(): TypeTypeContext;
    variableDeclaratorId(): VariableDeclaratorIdContext;
    expression(): ExpressionContext;
    variableModifier(): VariableModifierContext[];
    variableModifier(i: number): VariableModifierContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ParExpressionContext extends ParserRuleContext {
    expression(): ExpressionContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ExpressionListContext extends ParserRuleContext {
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class MethodCallContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    expressionList(): ExpressionListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ExpressionContext extends ParserRuleContext {
    _prefix: Token;
    _bop: Token;
    _postfix: Token;
    primary(): PrimaryContext | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    IDENTIFIER(): TerminalNode | undefined;
    methodCall(): MethodCallContext | undefined;
    THIS(): TerminalNode | undefined;
    NEW(): TerminalNode | undefined;
    innerCreator(): InnerCreatorContext | undefined;
    SUPER(): TerminalNode | undefined;
    superSuffix(): SuperSuffixContext | undefined;
    explicitGenericInvocation(): ExplicitGenericInvocationContext | undefined;
    nonWildcardTypeArguments(): NonWildcardTypeArgumentsContext | undefined;
    creator(): CreatorContext | undefined;
    typeType(): TypeTypeContext | undefined;
    INSTANCEOF(): TerminalNode | undefined;
    lambdaExpression(): LambdaExpressionContext | undefined;
    typeArguments(): TypeArgumentsContext | undefined;
    classType(): ClassTypeContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class LambdaExpressionContext extends ParserRuleContext {
    lambdaParameters(): LambdaParametersContext;
    lambdaBody(): LambdaBodyContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class LambdaParametersContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode[];
    IDENTIFIER(i: number): TerminalNode;
    formalParameterList(): FormalParameterListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class LambdaBodyContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    block(): BlockContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class PrimaryContext extends ParserRuleContext {
    expression(): ExpressionContext | undefined;
    THIS(): TerminalNode | undefined;
    SUPER(): TerminalNode | undefined;
    literal(): LiteralContext | undefined;
    IDENTIFIER(): TerminalNode | undefined;
    typeTypeOrVoid(): TypeTypeOrVoidContext | undefined;
    CLASS(): TerminalNode | undefined;
    nonWildcardTypeArguments(): NonWildcardTypeArgumentsContext | undefined;
    explicitGenericInvocationSuffix(): ExplicitGenericInvocationSuffixContext | undefined;
    arguments(): ArgumentsContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ClassTypeContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    classOrInterfaceType(): ClassOrInterfaceTypeContext | undefined;
    annotation(): AnnotationContext[];
    annotation(i: number): AnnotationContext;
    typeArguments(): TypeArgumentsContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class CreatorContext extends ParserRuleContext {
    nonWildcardTypeArguments(): NonWildcardTypeArgumentsContext | undefined;
    createdName(): CreatedNameContext;
    classCreatorRest(): ClassCreatorRestContext | undefined;
    arrayCreatorRest(): ArrayCreatorRestContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class CreatedNameContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode[];
    IDENTIFIER(i: number): TerminalNode;
    typeArgumentsOrDiamond(): TypeArgumentsOrDiamondContext[];
    typeArgumentsOrDiamond(i: number): TypeArgumentsOrDiamondContext;
    primitiveType(): PrimitiveTypeContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class InnerCreatorContext extends ParserRuleContext {
    IDENTIFIER(): TerminalNode;
    classCreatorRest(): ClassCreatorRestContext;
    nonWildcardTypeArgumentsOrDiamond(): NonWildcardTypeArgumentsOrDiamondContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ArrayCreatorRestContext extends ParserRuleContext {
    arrayInitializer(): ArrayInitializerContext | undefined;
    expression(): ExpressionContext[];
    expression(i: number): ExpressionContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ClassCreatorRestContext extends ParserRuleContext {
    arguments(): ArgumentsContext;
    classBody(): ClassBodyContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ExplicitGenericInvocationContext extends ParserRuleContext {
    nonWildcardTypeArguments(): NonWildcardTypeArgumentsContext;
    explicitGenericInvocationSuffix(): ExplicitGenericInvocationSuffixContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeArgumentsOrDiamondContext extends ParserRuleContext {
    typeArguments(): TypeArgumentsContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class NonWildcardTypeArgumentsOrDiamondContext extends ParserRuleContext {
    nonWildcardTypeArguments(): NonWildcardTypeArgumentsContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class NonWildcardTypeArgumentsContext extends ParserRuleContext {
    typeList(): TypeListContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeListContext extends ParserRuleContext {
    typeType(): TypeTypeContext[];
    typeType(i: number): TypeTypeContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeTypeContext extends ParserRuleContext {
    classOrInterfaceType(): ClassOrInterfaceTypeContext | undefined;
    primitiveType(): PrimitiveTypeContext | undefined;
    annotation(): AnnotationContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class PrimitiveTypeContext extends ParserRuleContext {
    BOOLEAN(): TerminalNode | undefined;
    CHAR(): TerminalNode | undefined;
    BYTE(): TerminalNode | undefined;
    SHORT(): TerminalNode | undefined;
    INT(): TerminalNode | undefined;
    LONG(): TerminalNode | undefined;
    FLOAT(): TerminalNode | undefined;
    DOUBLE(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class TypeArgumentsContext extends ParserRuleContext {
    typeArgument(): TypeArgumentContext[];
    typeArgument(i: number): TypeArgumentContext;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class SuperSuffixContext extends ParserRuleContext {
    arguments(): ArgumentsContext | undefined;
    IDENTIFIER(): TerminalNode | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ExplicitGenericInvocationSuffixContext extends ParserRuleContext {
    SUPER(): TerminalNode | undefined;
    superSuffix(): SuperSuffixContext | undefined;
    IDENTIFIER(): TerminalNode | undefined;
    arguments(): ArgumentsContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
export declare class ArgumentsContext extends ParserRuleContext {
    expressionList(): ExpressionListContext | undefined;
    constructor(parent: ParserRuleContext, invokingState: number);
    readonly ruleIndex: number;
    enterRule(listener: JavaParserListener): void;
    exitRule(listener: JavaParserListener): void;
    accept<Result>(visitor: JavaParserVisitor<Result>): Result;
}
